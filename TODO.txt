https://maah.gitbooks.io/discord-bots/content/storing-data/using-sql.html
https://discordpy-message-components.readthedocs.io/en/latest/

https://discordpy-message-components.readthedocs.io/en/latest/interaction.html#Interaction.respond
    Instead of DM? keep it all in the channel but with hidden messages (ephemeral)

- ISSUE: a field can hold a maximum of 2048 characters. Average of ~10chars per user -> maximum of 200 people
        temporary soln: just don't add more names after 2048 chars (unlikely that this will happen anyways)

- IMPLEMENT: edit_event()   # I have no idea what functionality this should have

- ISSUE: $help does not work in private channel
    ->  await destination.send(page)
    AttributeError: 'Object' object has no attribute 'send'
    where destination should be the ctx of $help

    (but sometimes it does! like right now)

- IDEA: https://github.com/gawel/aiocron    use aiocron to check on the MAYBE's X hrs before event Start

- IDEA: can reduce API calls by using messageID = mainChannel.get_partial_message(payload.message_id) at the start of
    on_raw_reaction_add() and on_raw_reaction_remove(). If it passes checks, fetch the entire Message object
    later in the function.

- IDEA: pin the event (is this necessary?)

- CHANGE: global variable for event variables. if it is None, then populate it from the DB.
    -> reduces database reads. Should only have to read DB once per restart / new event
    -> will have to read DB every time if there is no event. but that's fine.

- IDEA: Make the reaction removal less clunky? Currently I just slap an asyncio.wait(2) to avoid concurrency issues
        with triggering on_raw_reaction_remove(). Can I implement a queue using asyncio.queue?
        https://github.com/python-discord/bot/blob/main/bot/exts/help_channels/_cog.py
        https://docs.python.org/3/library/asyncio-queue.html#examples
            It seems that an asyncio Queue is a good way to handle this, but I'm not sure how to make it work.

---------PRIORITY--------------

- IMPLEMENT: https://codezup.com/python-program-reader-writer-problem-mutex/
    implement thread-queueing for sql writes (way better than current "buffer" solution lmao)
    https://www.sqlite.org/wal.html or perhaps this is a solution?
    https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor or maybe this?
    *** https://pypi.org/project/aiosqlite/     aiosqlite?
        "aiosqlite allows interaction with SQLite databases on the main AsyncIO event loop without blocking execution of
         other coroutines while waiting for queries or data fetches. It does this by using a single, shared thread per
         connection. This thread executes all actions within a shared request queue to prevent overlapping actions."

- CHANGE: make db.request_entry() send an embed, and format it more nicely (aligned columns?)
         Do the same for dm.ack_change()
         Do the same for ProfessionMenuView?
         $prof, $lotto prompts can be in the embed footer

         see professionMenuView for a reference (not completed)

- CHANGE: no longer building teams with logic. Instead just produce filtered lists (f.x. CE-A, CE-N, CE-F)
