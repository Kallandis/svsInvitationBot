https://maah.gitbooks.io/discord-bots/content/storing-data/using-sql.html

- NOTE: if commands are called by people in another timezone, the event time will be constructed on the local machine
        and timezone info will be assumed to be that of the local machine.

        So, all times given to the bot will be assumed to be in PST. Not sure how to deal with this other than getting
        people to put in times as unix times. But it's not a big deal

- CHANGE:   move the user-defined global variables into a different file (config.txt)
            then populate those user-defined global vars in on_ready()

- CHANGE:   DEPRECATED FOR NOW (was not received well)
            - When the fields become long, the buttons will be far below the event message.
            - soln: make the buttons be above the event message
                blankMsg = await ctx.send('')
                eventMsg = await ctx.send(embed=eventEmbed)
                view = EventButtons(eventMsg)
                await blankMsg.edit(view=view)
                - then, when deleting event, would have to remove the view from this instead of eventMessage

- CHANGE:   CSV formatting changes - depends on what the organizers want
            - remove certain redundant cols to make it more compact. F.X., when entries are grouped by unit and class,
                don't need to include the unit and class in that entry.

            - display march size as median instead of range?
                - if doing this, it would be best to just store it as that in the DB. Could still write the range
                  in db.info_embed() for user convenience.

- IDEA:     do I have to consider memory "leaks"? examples:
                - should I be explicitly deleting old instances of EventButtons() once the event closes?
                - should I be explicitly deleting instances of ProfessionMenuView()?

- IMPLEMENT: if the length of the event embed would become larger than 6000 chars, do not add a name to the fields
             (can still remove)

- IMPLEMENT: store all database entries in memory to reduce database accessing. make sure it is always synced with
             database (do some error checking stuff, only update the memory copy if database write is successful)
                - on_ready() should repopulate the memory copy of database (or reload_memory.py if I implement that)

---------PRIORITY--------------

- IMPLEMENT: edit_event()   # I have no idea what functionality this should have
             If allow for changing time, must restart the confirm_maybe_loop() with a new value

- IMPLEMENT: add a module or fxn "reload_memory.py" which resets the python cache if the bot is restarted
             Currently doing a lot of that functionality in on_ready(), so just call stuff from there.

             ** do things like restart the confirm_maybe() loop

- IMPLEMENT: add some cooldowns to commands to prevent spam
                - most of them should be pretty minor
                - except for $bug, which should be like 5 minutes

- CHANGE:   needs to work in 2 different servers (not concurrently). As long as the respective channels are in mainChannelIDs,
            the only thing that needs to be changed are a few calls to globals.guild
                - should be able to replace those with a reference to the guild that 'ctx' was in.
                - may need to change globals.adminRole to a list of qualified roles
                    -> use commands.has_any_role() instead of commands.has_role()

CHANGELIST FROM LAST TEST:
    - delete successful as well as unsuccessful commands in guild channels
    - add some text to the event embed telling people to check their DM if it's their first response
    - bot has activity text "Playing ~help" to show the command prefix and the help command
    - Put longer prompts in the message above the ""~info change" select menus
    UNTESTED:
        - confirm maybe loop restarts when bot restarts
        - confirm maybe loop closes when event is closed



UNTESTED CHANGES:
    - confirm maybe loop
    - confirm maybe loop restarts on bot startup if event is active
    - confirm maybe loop should cancel when event is closed
