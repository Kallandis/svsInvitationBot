https://maah.gitbooks.io/discord-bots/content/storing-data/using-sql.html
https://discordpy-message-components.readthedocs.io/en/latest/

https://discordpy-message-components.readthedocs.io/en/latest/interaction.html#Interaction.respond
    Instead of DM? keep it all in the channel but with hidden messages (ephemeral)

- ISSUE: a field can hold a maximum of 2048 characters. Average of ~10chars per user -> maximum of 200 people
        temporary soln: just don't add more names after 2048 chars (unlikely that this will happen anyways)

- IMPLEMENT: edit_event()   # I have no idea what functionality this should have

- ISSUE: $help does not work in private channel
    ->  await destination.send(page)
    AttributeError: 'Object' object has no attribute 'send'
    where destination should be the ctx of $help

    (but sometimes it does! like right now)


- CHANGE: let $create_event specify what time the event will be at, and also the title of the event
          Might have to consider timezones here.

- IDEA: pin the event (is this necessary?)

- CHANGE: global variable for event variables. if it is None, then populate it from the DB.
    -> reduces database reads. Should only have to read DB once per restart / new event
    -> will have to read DB every time if there is no event. but that's fine.

- CHANGE: change bot name to AvoBot

---------PRIORITY--------------

- IMPLEMENT: custom help command https://gist.github.com/InterStella0/b78488fb28cadf279dfd3164b9f0cf96

- IMPLEMENT: confirm_maybe()
    https://github.com/gawel/aiocron    use aiocron to check on the MAYBE's X hrs before event Start

- CHANGE: no longer building teams with logic. Instead just produce filtered lists (f.x. CE-A, CE-N, CE-F)

- IMPLEMENT: https://codezup.com/python-program-reader-writer-problem-mutex/
    implement thread-queueing for sql writes (way better than current "buffer" solution lmao)
    https://www.sqlite.org/wal.html or perhaps this is a solution?
    https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor or maybe this?
    *** https://pypi.org/project/aiosqlite/     aiosqlite?
        "aiosqlite allows interaction with SQLite databases on the main AsyncIO event loop without blocking execution of
         other coroutines while waiting for queries or data fetches. It does this by using a single, shared thread per
         connection. This thread executes all actions within a shared request queue to prevent overlapping actions."

- CHANGE:   move lottery() to commands.py
            move request_entry to db.py

            -> kill off dm.py
